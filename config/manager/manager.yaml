apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - command:
        - /manager
        args:
        - --leader-elect
        image: controller:latest
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 1000Mi
          requests:
            cpu: 10m
            memory: 64Mi
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-ecr-cloud-credentials
              key: aws_access_key_id
              optional: true
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-ecr-cloud-credentials
              key: aws_secret_access_key
              optional: true
        - name: AWS_SDK_LOAD_CONFIG
          value: '1'
        - name: AWS_CONFIG_FILE
          value: /var/run/secrets/aws/credentials        
        - name: WATCH_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: aws-credentials
          mountPath: /var/run/secrets/aws
          readOnly: true 
        - name: bound-sa-token
          mountPath: /var/run/secrets/openshift/serviceaccount
          readOnly: true
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: aws-credentials
        secret:
          secretName: aws-ecr-cloud-credentials
          optional: true
      - name: bound-sa-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              audience: openshift
